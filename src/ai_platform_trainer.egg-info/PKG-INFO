Metadata-Version: 2.4
Name: ai_platform_trainer
Version: 0.1.0
Summary: A game environment for training and evaluating AI agents through reinforcement learning
Author: AI Platform Developer Team
License: MIT License
        
        Copyright (c) 2024 Andrew Clark
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/yourusername/ai-platform-trainer
Project-URL: Bug Tracker, https://github.com/yourusername/ai-platform-trainer/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.19.0
Requires-Dist: pygame>=2.1.0
Requires-Dist: torch>=1.9.0
Requires-Dist: gymnasium>=0.28.0
Requires-Dist: stable-baselines3>=1.6.0
Requires-Dist: noise>=1.2.2
Provides-Extra: dev
Requires-Dist: black>=23.1.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=6.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.2.0; extra == "docs"
Requires-Dist: nbsphinx>=0.8.0; extra == "docs"
Dynamic: license-file

# AI Platform Trainer

An enterprise-grade platform for training and evaluating AI agents using reinforcement learning in a game environment.

## Overview

AI Platform Trainer is a 2D platformer game environment designed for training and evaluating AI agents using deep reinforcement learning. The platform includes a neural network-based enemy AI, reinforcement learning training capabilities, real-time visualizations, and a high-performance C++/CUDA backend for accelerated training.

## Features

- **Game Environment**: A 2D game environment built with PyGame where entities can interact
- **Neural Network Models**: Pre-trained models for missile trajectory prediction and enemy movement
- **Reinforcement Learning**: GPU-accelerated reinforcement learning using PPO for training enemy behaviors
- **C++/CUDA Integration**: High-performance physics simulation with Python bindings
- **Visualizations**: Real-time training visualizations and performance metrics
- **Cross-platform**: Support for both CPU and GPU environments with automatic detection

## Directory Structure

```
ai_platform_trainer/
├── src/                       # All source code
│   └── ai_platform_trainer/   # Main package
│       ├── core/              # Core engine components
│       ├── ml/                # Machine learning components
│       │   ├── models/        # Neural network definitions
│       │   ├── training/      # Training pipelines
│       │   ├── rl/            # Reinforcement learning
│       │   └── inference/     # Model inference
│       ├── physics/           # Physics engine (with C++ bindings)
│       ├── entities/          # Game entities
│       ├── rendering/         # Visualization and rendering
│       └── utils/             # Utility functions
├── tests/                     # Test suite
├── docs/                      # Documentation
├── scripts/                   # Utility scripts
├── assets/                    # Game assets
└── deployment/                # Deployment configurations
```

## Requirements

- Python 3.8 or newer
- PyTorch 1.8.0 or newer
- CUDA Toolkit 10.2+ (optional, for GPU acceleration)
- CMake 3.10+ (for building C++ extensions)

## Installation

### CPU Environment

```bash
# Create a conda environment
conda env create -f environment-cpu.yml
conda activate ai-platform-cpu

# Install the package
pip install -e .
```

### GPU Environment (recommended for training)

```bash
# Create a conda environment with CUDA support
conda env create -f environment-gpu.yml
conda activate ai-platform-gpu

# Install the package
pip install -e .

# Build the C++ extensions
cd src/ai_platform_trainer/physics/cpp
python setup.py build_ext --inplace
```

## Usage

### Running the Game

```bash
# Run the game in play mode
python -m src.ai_platform_trainer.main
```

### Training Models

#### Training the Missile Model

```bash
# Train the missile trajectory prediction model
python -m src.ai_platform_trainer.ml.training.train_missile_model --epochs 100 --batch-size 32
```

#### Training the Enemy RL Agent

```bash
# Train the enemy agent using reinforcement learning
python -m src.ai_platform_trainer.ml.rl.train_enemy_rl --timesteps 1000000 --save-freq 10000
```

## Documentation

For more detailed information, refer to:

- [Project Structure](docs/design/project_structure.md): Details on code organization
- [Refactoring Next Steps](docs/refactoring_next_steps.md): Future improvements

## Development

To set up a development environment:

1. Install development dependencies
```bash
pip install -e ".[dev]"
```

2. Install pre-commit hooks
```bash
pre-commit install
```

3. Run tests
```bash
python -m pytest
```

## License

[Insert license information]
