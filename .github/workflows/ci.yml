name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering
  release:
    types: [created]  # Trigger on new releases

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install flake8 autoflake black isort mypy
    
    - name: Run linters
      run: |
        flake8 ai_platform_trainer tests
        black --check ai_platform_trainer tests
        isort --check-only ai_platform_trainer tests
        mypy ai_platform_trainer

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest -v tests/
    
    - name: Generate coverage report
      run: |
        pytest --cov=ai_platform_trainer tests/ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        flags: python-${{ matrix.python-version }}

  # Only run GPU tests on self-hosted runners with GPU capabilities
  # Uncomment when GPU runners are available
  # test-gpu:
  #   name: Test (GPU)
  #   runs-on: [self-hosted, gpu]
  #   needs: lint
  #   
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0  # Full history for proper versioning
  #   
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.9'
  #   
  #   - name: Install dependencies with GPU support
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -e ".[dev]"
  #   
  #   - name: Verify GPU availability
  #     run: |
  #       nvidia-smi || echo "No GPU available"
  #       python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
  #       python -c "import torch; print(f'GPU count: {torch.cuda.device_count()}')"
  #   
  #   - name: Run GPU tests
  #     run: |
  #       pytest -v tests/ -m "gpu"

  # Package building job
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check dist contents
      run: |
        ls -la dist/
    
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
        
  # Publish to PyPI on release
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Check downloaded artifacts
      run: |
        ls -la dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
